- hosts: localhost

  become: yes

  vars:
    default_editor: vim
    user: daniel
    dotfiles:
      repo: 'git@github.com:djonasson/dotfiles.git'
      version: master
    vundle:
      repo: 'https://github.com/VundleVim/Vundle.vim.git'
      version: master
      install_dir: "/home/{{ user }}/.vim/bundle/Vundle.vim"
    ssh_key: '.ssh/id_ed25519'
    oh_my_zsh_directory: "/home/{{ user }}/.oh-my-zsh"
    oh_my_zsh_plugins:
      - dotenv
      - git
      - git-flow
      - nvm
      - npm
      - npx
      - node
      - tmux
    vscode_extensions:
      - christian-kohler.npm-intellisense
      - christian-kohler.path-intellisense
      - dbaeumer.vscode-eslint
      - eamodio.gitlens
      - eg2.vscode-npm-script
      - esbenp.prettier-vscode
      - jasonnutter.search-node-modules
      - ms-azuretools.vscode-docker
      - ms-vscode-remote.remote-containers
      - vscodevim.vim
      - waderyan.nodejs-extension-pack
      - xabikos.JavaScriptSnippets

  tasks:
    - name: "Install system packages"
      apt:
        name:
          - apt-transport-https
          - autojump
          - bat
          - build-essential
          - ca-certificates
          - cifs-utils
          - curl
          - default-jre
            #- exa
          - exuberant-ctags
          - fonts-powerline
          - gcc
            #- gimp
          - git
          - git-flow
          - gnome-tweaks
          - gnupg
          - htop
          - make
          - net-tools
            #- nfs-common
            #- nfs-server
          - perl
            #- pgadmin3
            #- postgresql
            #- postgresql-common
          - python
          - rbenv
          - ruby-build
          - ruby-dev
            #- samba
            #- samba-common
            #- snapd
          - tmux
          - traceroute
          - vim
          - zsh
        state: latest

    - name: oh-my-zsh directory reference
      stat:
        path: "{{ oh_my_zsh_directory }}"
      register: oh_my_zsh_reference

    - name: Install oh-my-zsh if it hasn't been done already
      shell: 'sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended'
      #environment:
      #  HOME: "/home/{{ user }}"
      #  USERNAME: "{{user }}"
      when: not oh_my_zsh_reference.stat.exists
      become: no

    - name: Update oh-my-zsh if it was previously installed
      shell: ". {{ oh_my_zsh_directory }}/lib/cli.zsh && omz update"
      args:
        executable: /bin/zsh
      #environment:
      #  HOME: "/home/{{ user }}"
      #  USERNAME: "{{user }}"
      when: oh_my_zsh_reference.stat.exists and oh_my_zsh_reference.stat.isdir
      become: no

    - name: "Check out dotfiles from repository"
      git:
        repo: "{{ dotfiles.repo }}"
        dest: "/home/{{ user }}/.dotfiles"
        accept_hostkey: yes
        key_file: "/home/{{ user }}/{{ ssh_key }}"
        force: yes
        version: "{{ dotfiles.version }}"
      #delegate_to: localhost
      #run_once: true
      become: no

    - name: "Check out vundle from repository"
      git:
        repo: "{{ vundle.repo }}"
        dest: "{{ vundle.install_dir }}"
        accept_hostkey: yes
        force: yes
        version: "{{ vundle.version }}"
      become: no

    - name: "Install ansible plugins"
      command: "ansible-galaxy collection install community.general"
      become: no

    - name: "Set default git editor (add a setting to ~/.gitconfig)"
      community.general.git_config:
        name: core.editor
        scope: global
        value: "{{ default_editor }}"

    - name: "Is nvm installed?"
      shell: "command -v nvm"
      register: nvm_path
      ignore_errors: yes
      become: no

    - name: "Install nvm"
      shell: 'sh -c "$(wget -O- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh)"'
      when: nvm_path.stdout == ""
      become: no

    - name: "Install current LTS version of node"
      shell: "nvm install --lts"
      ignore_errors: yes
      become: no

    - name: "Add customizations to .zshrc file"
      blockinfile:
        path: "/home/{{ user }}/.zshrc"
        block: |
          if [ -f "/home/{{ user }}/.dotfiles/.aliases" ]; then
            . "/home/{{ user }}/.dotfiles/.aliases"
          fi
          if [ -f "/home/{{ user }}/.dotfiles/.exports" ]; then
            . "/home/{{ user }}/.dotfiles/.exports"
          fi
          if [ -f "/home/{{ user }}/.dotfiles/.personal" ]; then
            . "/home/{{ user }}/.dotfiles/.personal"
          fi
          export NVM_DIR="/home/{{ user }}/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

    - name: "Set oh-my-zsh plugins in .zshrc file"
      lineinfile:
        path: "/home/{{ user }}/.zshrc"
        regexp: '^plugins='
        line: "plugins=({{ oh_my_zsh_plugins | join(' ') }})"

    - name: "Link .zlogin from our .dotfiles checkout"
      ansible.builtin.file:
        src: "/home/{{ user }}/.dotfiles/.zlogin"
        dest: "/home/{{ user }}/.zlogin"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: link

    - name: "Link .tmux.conf from our .dotfiles checkout"
      ansible.builtin.file:
        src: "/home/{{ user }}/.dotfiles/.tmux.conf"
        dest: "/home/{{ user }}/.tmux.conf"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: link

    - name: "Link .vimrc from our .dotfiles checkout"
      ansible.builtin.file:
        src: "/home/{{ user }}/.dotfiles/.vimrc"
        dest: "/home/{{ user }}/.vimrc"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: link

    - name: "Link .vimrc.bundles from our .dotfiles checkout"
      ansible.builtin.file:
        src: "/home/{{ user }}/.dotfiles/.vimrc.bundles"
        dest: "/home/{{ user }}/.vimrc.bundles"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: link

    - name: "Install Visual Studio Code"
      shell: |
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
        install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
        sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
        rm -f packages.microsoft.gpg
        apt install apt-transport-https
        apt update
        apt install code
      args:
        creates: "/usr/bin/code"
      become: yes

    - name: "List of installed Visual Studio Code Extensions"
      command: code --list-extensions
      register: installed_vscode_extensions
      become: no

    - name: "Install Visual Studio Code Extensions"
      command: "code --install-extension {{ item }} --force"
      with_items: "{{ vscode_extensions }}"
      when: item not in installed_vscode_extensions.stdout_lines
      become: no

    - name: "Is Google Chrome installed?"
      shell: "command -v google-chrome"
      register: google_chrome_path

    - name: "Download Google Chrome .deb file"
      get_url:
        url: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        dest: "/home/{{ user }}/google-chrome-stable_current_amd64.deb"
        mode: '0440'
      args:
        creates: "/home/{{ user }}/google-chrome-stable_current_amd64.deb"
      when: google_chrome_path == ""

    - name: "Install Google Chrome"
      command: "dpkg -i /home/{{ user }}/google-chrome-stable_current_amd64.deb"
      when: google_chrome_path == ""
      become: yes

    - name: "Remove Google Chrome .deb file"
      command: "rm /home/{{ user }}/google-chrome-stable_current_amd64.deb"
      when: google_chrome_path == ""
      become: yes
